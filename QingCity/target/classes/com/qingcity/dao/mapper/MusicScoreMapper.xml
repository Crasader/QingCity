<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qingcity.dao.MusicScoreMapper">
	<resultMap id="BaseResultMap" type="MusicScoreEntity">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="userId" property="userId" jdbcType="INTEGER" />
		<result column="musicId" property="musicId" jdbcType="INTEGER" />
		<result column="season" property="season" jdbcType="INTEGER" />
		<result column="week" property="week" jdbcType="INTEGER" />
		<result column="day" property="day" jdbcType="TIMESTAMP" />
		<result column="musicGrade" property="musicGrade" jdbcType="INTEGER" />
		<result column="normalHighScore" property="normalHighScore"
			jdbcType="INTEGER" />
		<result column="difficulty" property="difficulty" jdbcType="INTEGER" />
	</resultMap>
	<sql id="Base_Column_List">
		id,userId, musicId, season, week, day, musicGrade,
		normalHighScore,difficulty
	</sql>
	<resultMap id="queryForMusicList" type="MusicScoreEntity">
		<id column="musicId" jdbcType="INTEGER" property="musicId" />
		<result column="musicGrade" property="musicGrade" jdbcType="INTEGER" />
		<result column="normalHighScore" property="normalHighScore"
			jdbcType="INTEGER" />
		<association property="musicEntity" javaType="MusicEntity">
			<result column="city" jdbcType="INTEGER" property="city" />
			<result column="musicName" jdbcType="VARCHAR" property="musicName" />
			<result column="singerName" jdbcType="VARCHAR" property="singerName" />
		</association>
	</resultMap>
	<resultMap id="queryForRankMap" type="java.util.HashMap">
		<id property="userId" column="userId" />
		<result property="rank" column="rank" />
		<result property="a_ms" column="a_ms" />
	</resultMap>
	<resultMap id="selectSumGrade" type="MusicScoreEntity">
		<result column="musicGrade" property="musicGrade" jdbcType="INTEGER" />
		<association property="musicEntity" javaType="MusicEntity">
			<result column="city" property="city" jdbcType="INTEGER" />
		</association>
	</resultMap>
	<!-- 查询玩家所有音乐的最大成绩、评分及对应的歌曲信息 -->
	<select id="queryForMusicList" parameterType="Integer"
		resultMap="queryForMusicList">
		SELECT
		mc.musicId,MAX(mc.musicGrade) AS
		musicGrade,MAX(mc.normalHighScore) AS
		normalHighScore,m.musicName,m.singerName,m.city FROM musicscore mc
		LEFT JOIN
		music
		m ON mc.musicId = m.musicId WHERE m.city =
		#{city,jdbcType=INTEGER} AND mc.userId = #{userId,jdbcType=INTEGER}
		AND
		mc.season =
		#{season,jdbcType=INTEGER} GROUP BY musicId
	</select>
	<select id="queryForRankMap" parameterType="Integer" resultMap="queryForRankMap"
		statementType="CALLABLE">
		{call queryForRank(#{season, jdbcType=INTEGER,
		mode=IN},#{city, jdbcType=INTEGER,
		mode=IN})}
	</select>
	<!-- 查询一个人的总评分musicGrade,用于主页 -->
	<select id="selectSumGrade" parameterType="Integer" resultMap="selectSumGrade">
		SELECT SUM(mg) as musicGrade,city FROM (SELECT MAX(mc.musicgrade) AS
		mg,mc.musicId,m.city FROM musicscore mc LEFT JOIN music m ON
		mc.musicId = m.musicId
		WHERE userId = #{userId,jdbcType=INTEGER} AND
		season = #{season,jdbcType=INTEGER} GROUP BY musicId) AS ms group by
		city;
	</select>
	<!-- 查询某一首歌的平均成绩,可用于无人进行pk时使用 -->
	<select id="selectScoreByMusicIdAndUserId" parameterType="Integer"
		resultType="Integer">
		select AVG(NormalHighScore) from musicScore where
		userId=#{userId} and musicId = #{musicId}
	</select>

	<!-- 查询历史最高成绩、评分。不考虑难易程度 -->
	<select id="selectMaxGrade" resultType="INTEGER" parameterType="INTEGER">
		SELECT MAX(musicGrade) FROM musicScore WHERE userid = #{userId} GROUP
		BY musicId
	</select>
	<select id="selectMaxScore" resultType="INTEGER" parameterType="INTEGER">
		SELECT MAX(normalHighScore) FROM musicScore WHERE userid = #{userId}
		GROUP BY musicId
	</select>
	<select id="selectTodayRecord" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM
		musicScore WHERE userId =
		#{userId,jdbcType=INTEGER} AND
		musicId =
		#{musicId,jdbcType=INTEGER} AND
		difficulty =
		#{difficulty,jdbcType=INTEGER} AND DAY BETWEEN
		#{zero,jdbcType=TIMESTAMP}
		AND #{twelve,jdbcType=TIMESTAMP}
	</select>
	<!-- 用于PK -->
	<select id="selectPlayerByMusicIdAndLevel" parameterType="Integer"
		resultType="Integer">
		select distinct userId from musicscore m inner join
		player
		p
		on p.userId = m.userId where musicId =
		#{musicId,jdbcType=INTEGER}
		and
		p.level between
		#{levelOff,jdbcType=INTEGER} and
		#{levelEnd,jdbcType=INTEGER}
	</select>
	<insert id="insertScoreSelective" parameterType="MusicScoreEntity"
		useGeneratedKeys="true" keyProperty="id">
		insert into musicscore
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="userId != null">
				userId,
			</if>
			<if test="musicId != null">
				musicId,
			</if>
			<if test="season != null">
				season,
			</if>
			<if test="week != null">
				week,
			</if>
			<if test="day != null">
				day,
			</if>
			<if test="musicGrade != null">
				musicGrade,
			</if>
			<if test="normalHighScore != null">
				normalHighScore,
			</if>
			<if test="difficulty != null">
				difficulty,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="userId != null">
				#{userId,jdbcType=INTEGER},
			</if>
			<if test="musicId != null">
				#{musicId,jdbcType=INTEGER},
			</if>
			<if test="season != null">
				#{season,jdbcType=INTEGER},
			</if>
			<if test="week != null">
				#{week,jdbcType=INTEGER},
			</if>
			<if test="day != null">
				#{day,jdbcType=TIMESTAMP},
			</if>
			<if test="musicGrade != null">
				#{musicGrade,jdbcType=INTEGER},
			</if>
			<if test="normalHighScore != null">
				#{normalHighScore,jdbcType=INTEGER},
			</if>
			<if test="difficulty != null">
				#{difficulty,jdbcType=INTEGER}
			</if>
		</trim>
	</insert>
	<!-- 存在记录的时候就进行更新操 作 -->
	<update id="updateRecord" parameterType="MusicScoreEntity">
		update musicscore
		<set>
			<if test="day != null">
				day = #{day,jdbcType=TIMESTAMP},
			</if>
			<if test="musicGrade != null">
				musicGrade = #{musicGrade,jdbcType=INTEGER},
			</if>
			<if test="normalHighScore != null">
				normalHighScore = #{normalHighScore,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	
	
	<!-- 查询历史最高成绩 。考虑难易程度 -->
	<select id="selectMaxGradeDifficulty" resultType="INTEGER"
		parameterType="INTEGER">
		SELECT MAX(musicGrade) FROM musicScore WHERE userid =
		#{userId} and
		difficulty = #{difficulty} GROUP BY musicId
	</select>
	<select id="selectMaxScoreDifficulty" resultType="INTEGER"
		parameterType="INTEGER">
		SELECT MAX(normalHighScore) FROM musicScore WHERE userid
		= #{userId}
		and difficulty = #{difficulty} GROUP BY musicId
	</select>

	<!-- 1.查询最高grade 2.查询最高normalHighScore 3.查询grade总和 4. 查询每个城的最高分(需要在音乐表里添加每个城的标识) 
		5.查询总排名 6.总闯关数(即已经解锁的音乐) 5. -->
	<!-- 查询某一首歌的最高musicGrade -->
	<select id="selectGradeByMusicIdAnduserId" parameterType="Integer"
		resultType="Integer">
		select max(musicGrade) from musicScore where userId =
		#{userId}
		and musicId = #{musicId}
		#{musicId} and difficulty =
		#{difficulty}
	</select>
	<update id="updateByMusicIdAnduserIdSelective" parameterType="MusicScoreEntity">
		update musicscore
		<set>
			<if test="musicId != null">
				musicId = #{musicId,jdbcType=INTEGER},
			</if>
			<if test="season != null">
				season = #{season,jdbcType=INTEGER},
			</if>
			<if test="week != null">
				week = #{week,jdbcType=INTEGER},
			</if>
			<if test="day != null">
				day = #{day,jdbcType=TIMESTAMP},
			</if>
			<if test="musicGrade != null">
				musicGrade = #{musicGrade,jdbcType=INTEGER},
			</if>
			<if test="normalHighScore != null">
				normalHighScore = #{normalHighScore,jdbcType=INTEGER},
			</if>
			<if test="difficulty != null">
				difficulty = #{difficulty,jdbcType=INTEGER},
			</if>
		</set>
		where musicId = #{musicId,jdbcType=INTEGER}
		and userId =
		#{userId,jdbcType=INTEGER}
	</update>
	<update id="updateByMusicIdAnduserId" parameterType="MusicScoreEntity">
		update
		musicscore
		set musicId =
		#{musicId,jdbcType=INTEGER},
		season =
		#{season,jdbcType=INTEGER},
		week =
		#{week,jdbcType=INTEGER},
		day =
		#{day,jdbcType=TIMESTAMP},
		musicGrade =
		#{musicGrade,jdbcType=INTEGER},
		normalHighScore =
		#{normalHighScore,jdbcType=INTEGER},
		difficulty =
		#{difficulty,jdbcType=INTEGER}
		where musicId =
		#{musicId,jdbcType=INTEGER}
		and userId = #{userId,jdbcType=INTEGER}
	</update>
	<delete id="deleteBymusicIdAnduserId" parameterType="MusicScoreEntity">
		delete
		from
		musicscore
		where musicId = #{musicId,jdbcType=INTEGER}
		and userId
		=
		#{userId,jdbcType=INTEGER}
	</delete>
	<select id="selectByMusicIdAndUserId" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from musicscore
		where musicId = #{musicId,jdbcType=INTEGER}
		and userId
		=
		#{userId,jdbcType=INTEGER} group by musicId
	</select>

</mapper>